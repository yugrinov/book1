---
title: Managing Secrets
owner: Build Service Team
---

This topic describes managing Kubernetes secrets in VMware Tanzu Build Service.


## <a id='overview'></a> Overview

VMware Tanzu Build Service uses Kubernetes secrets to manage credentials. To publish images to a registry, you must use a registry secret. To use source code stored in a private Git repository, you must use a Git secret.

Secrets are namespaced and can only be used for image configurations that exist in the same namespace. You can manage secrets with the `kp` CLI.

For more information about Kubernetes secrets, see [Secrets](https://kubernetes.io/docs/concepts/configuration/secret/) in the Kubernetes documentation. For more information about secret synchronization, see [Secrets in Tanzu Build Service](secrets-in-tbs.html).


## <a id='creating-secrets'></a> Create Secrets

You can create secrets using the `kp` CLI and script them with environment variables.

Secrets are created in the Kubernetes `current-context` namespace, unless you specify a different namespace using the `--namespace` or `-n` flag. Kubernetes automatically adds these secrets to the `default` service account in the same namespace.

<p class='note'><strong>Note:</strong> The <code>kp</code> CLI does not validate the secret against the specified registry or Git at the time of secret creation. The <code>kp</code> CLI reports incorrect credentials as they are used during an image build.</p>

### <a id='docker-hub-registry-secret'></a> Create a Docker Hub Registry Secret

You can create a Docker Hub registry secret using the `--dockerhub` flag.

To create a Docker Hub registry secret:

1. Run:

    ```
    kp secret create DOCKER-HUB-CREDENTIALS \
      --dockerhub DOCKER-HUB-ID
    ```
    Where:
    * `DOCKER-HUB-CREDENTIALS` is the name you give your Docker Hub registry secret.
    * `DOCKER-HUB-ID` is your Docker Hub user ID.

1. When prompted, enter your Docker Hub password. Alternatively, you can use the `DOCKER_PASSWORD` environment variable to bypass the password prompt.

The Docker Hub registry secret is stored as a `kubernetes.io/dockerconfigjson` secret.

### <a id='gcr-registry-secret'></a> Create a GCR Registry Secret

You can create a GCR registry secret using the `--gcr` flag.

To create a GCR registry secret:

1. Run:

    ```
    kp secret create GCR-CREDENTIALS \
      --gcr /tmp/GCR-SERVICE-ACCOUNT.json
    ```
    Where:
    * `GCR-CREDENTIALS` is the name you give your GCR registry secret.
    * `GCR-SERVICE-ACCOUNT` is your GCR service account.
    <br>
    <br>
    Alternatively, you can use the `GCR_SERVICE_ACCOUNT_PATH` environment variable instead of the `--gcr` flag.

The GCR registry secret is stored as a `kubernetes.io/dockerconfigjson` secret.

### <a id='registry-secret'></a> Create an Artifactory, Harbor, or ACR Registry Secret

You can create an Artifactory, Harbor, or ACR secret using the `--registry` and `--registry-user` flags.

To create an Artifactory, Harbor, or ACR secret:

1. Run:

    ```
    kp secret create REGISTRY-CREDENTIALS \
      --registry REGISTRY-URL \
      --registry-user REGISTRY-USER-ID
    ```
    Where:
    * `REGISTRY-CREDENTIALS` is the name you give your Artifactory, Harbor, or ACR registry secret.
    * `REGISTRY-URL` is the URL of the registry. This should only be the domain for the registry and should not contain folders or projects. Ex. registry.io not registry.io/project.
    * `REGISTRY-USER-ID` is your registry user ID.

1. When prompted, enter your registry password. Alternatively, you can use the `REGISTRY_PASSWORD` environment variable to bypass the password prompt.

The Artifactory, Harbor, or ACR registry secret is stored as a `kubernetes.io/dockerconfigjson` secret.

### <a id='git-ssh-secret'></a> Create a Git SSH Secret

You can create a Git SSH secret by specifying a Git ssh url and private SSH key.

To create a Git SSH secret:

1. Run:

    ```
    kp secret create GIT-SSH-CREDENTIALS \
      --git-url GIT-SSH-URL \
      --git-ssh-key /tmp/PRIVATE-SSH-KEY
    ```
    Where:
    * `GIT-SSH-CREDENTIALS`
    * `GIT-SSH-URL` is the git ssh domain url. This is not the full repository url. Value should be `git@github.com` for GitHub.
    * `PRIVATE-SSH-KEY` is your private SSH key. Alternatively, you can use the `GIT_SSH_KEY_PATH` environment variable instead of the `--git-ssh-key` flag.

The Git SSH secret is stored as a `kubernetes.io/ssh-auth` secret.

### <a id='git-basic-auth-secret'></a> Create a Git Basic Auth Secret

You can create a Git basic auth secret by providing your Git username and password.

To create a Git basic auth secret:

1. Run:

    ```
    kp secret create GIT-CREDENTIALS \
      --git-url GIT-URL \
      --git-user GIT-USERNAME
    ```
    Where:
    * `GIT-CREDENTIALS` is the name you give your Git basic auth secret.
    * `GIT-URL` is the Git domain url. This is not the full repository url. Value should be `https://github.com` for GitHub.
    * `GIT-USERNAME` is your Git username.

1. When prompted, enter your Git password. Alternatively, you can use the `GIT_PASSWORD` environment variable to bypass the password prompt.

The Git basic auth secret is stored as a `kubernetes.io/basic-auth` secret.


## <a id='listing-secrets'></a> List Secrets

To list the names and the targets for your secrets:

1. Run:

    ```
    kp secret list
    ```
    The command returns output similar to the following:

    <pre class='terminal'>
    NAME                   TARGET
    default-token-qrdbr
    docker-hub-creds       https://index.docker.io/v1/
    gcr-creds              gcr.io
    git-creds              https://github.com
    git-ssh-creds          git@github.com
    harbor-creds           registry.pivotal.io
    </pre>
    Unless you specify a namespace using the `--namespace` or `-n` flag, running the `kp secret list` command lists secrets for the Kubernetes `current-context` namespace. The `default-token-xxxxx` secret is the secret Kubernetes automatically adds to the `default` service account.


## <a id='deleting-secrets'></a> Delete Secrets

To delete secrets:

1. Run:

    ```
    kp secret delete SECRET
    ```
    Where `SECRET` is the name of the secret you want to delete.

Unless you specify a namespace using the `--namespace` or `-n` flag, secrets are deleted from the Kubernetes `current-context` namespace.

## <a id='service-bindings'></a> Service Bindings

Tanzu Build Service supports application service bindings as described in the Cloud Native Buildpack [Service Bindings specification](https://github.com/buildpacks/spec/blob/main/extensions/bindings.md).

The `kp` CLI does not currently support creating service bindings, you should use `kubectl`.

### <a id='service-bindings'></a> Creating a Secret for Application Service Bindings

To create a service binding in your application image, you must create a Kubernetes Secret containing the service binding data and an Image referencing that Secret in the `spec.build.bindings` field.

The following example that can be used with `kubectl apply` creates a `settings.xml` service binding for a maven app image. This will create a file named `settings` that will be available to the app at build and runtime.

Example:

```
apiVersion: build.pivotal.io/v1alpha1
kind: Image
metadata:
  name: sample-binding-with-secret
spec:
  tag: registry.com/image/tag
  builder:
    kind: ClusterBuilder
    name: default
  source:
    git:
      url: https://github.com/buildpack/sample-java-app.git
      revision: 0eccc6c2f01d9f055087ebbf03526ed0623e014a
  build:
    bindings:
    - name: settings
      secretRef:
        name: settings-xml
---
apiVersion: v1
kind: Secret
metadata:
  name: settings-xml
type: Opaque
stringData:
  settings.xml: <settings>...</settings>
```

